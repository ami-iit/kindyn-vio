name: C++ CI Workflow

on:
  push:
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

env:
  manif_TAG: 0.0.4
  blf_TAG: 192f9933ed075fc268398eca4c6f2b12d89a6fa4

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, macos-latest]
        #os: [ windows-latest, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        mamba-version: "*"
        channels: conda-forge,robotology
        channel-priority: true

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # For some reason defaults remain as  a channel even if it is not in the channels option
        # let's remove it manually
        conda config --remove channels defaults
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install -c conda-forge -c robotology idyntree eigen manif spdlog libmatio matio-cpp opencv pcl catch2 yarp nlohmann_json boost-cpp

    # Additional dependencies useful only on Linux
    - name: Additional Dependencies [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # Additional dependencies only useful on Linux
        # See https://github.com/robotology/robotology-superbuild/issues/477
        mamba install bash-completion expat-cos6-x86_64 freeglut libdc1394 libselinux-cos6-x86_64 libxau-cos6-x86_64 libxcb-cos6-x86_64 libxdamage-cos6-x86_64 libxext-cos6-x86_64 libxfixes-cos6-x86_64 libxxf86vm-cos6-x86_64 mesalib mesa-libgl-cos6-x86_64 mesa-libgl-devel-cos6-x86_64

    #- name: Boost Dependency [Windows]
    #  if: contains(matrix.os, 'windows')
    #  shell: bash -l {0}
    #  run: |
    #    mamba install boost=1.67.0

    - name: GTSAM Dependency [Source Based - MacOS & Linux]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # GTSAM
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/borglab/gtsam
        cd gtsam
        mkdir -p build
        cd build
        cmake -GNinja -DGTSAM_USE_SYSTEM_EIGEN:BOOL=ON \
              -DGTSAM_COMPILE_FEATURES_PUBLIC=cxx_std_17 \
              -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF \
              -DGTSAM_WITH_TBB=OFF \
              -DGTSAM_BUILD_TESTS:BOOL=OFF -DGTSAM_BUILD_EXAMPLES_ALWAYS:BOOL=OFF \
              -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} ..
        cmake --build . --config ${{ matrix.build_type }} --target install

    - name: Dependencies [Source Based - MacOS & Linux]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        # bipedal-locomotion-framework
        cd ${GITHUB_WORKSPACE}
        git clone -b ${blf_TAG} https://github.com/ami-iit/bipedal-locomotion-framework
        cd bipedal-locomotion-framework
        mkdir -p build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} ..
        cmake --build . --config ${{ matrix.build_type }} --target install

    #- name: Dependencies [Source Based - windows]
    #  if: contains(matrix.os, 'windows')
    #  env:
    #      BOOST_ROOT: ${{ steps.install-boost-windows.outputs.BOOST_ROOT }}
    #  shell: bash -l {0}
    #  run: |
    #    # GTSAM
    #    cd ${GITHUB_WORKSPACE}
    #    git clone https://github.com/borglab/gtsam
    #    cd gtsam
    #    mkdir -p build
    #    cd build
    #    cmake -G"Visual Studio 16 2019" \
    #          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
    #          -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library  ..
    #    cmake --build . --config ${{ matrix.build_type }} --target install

    #    # bipedal-locomotion-framework
    #    cd ${GITHUB_WORKSPACE}
    #    git clone -b ${blf_TAG} https://github.com/ami-iit/bipedal-locomotion-framework
    #    cd bipedal-locomotion-framework
    #    mkdir -p build
    #    cd build
    #    cmake -G"Visual Studio 16 2019" \
    #          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
    #          -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library ..
    #    cmake --build . --config ${{ matrix.build_type }} --target install

    - name: Configure [MacOS & Linux]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    #- name: Configure [Windows]
    #  if: contains(matrix.os, 'windows')
    #  shell: bash -l {0}
    #  run: |
    #    mkdir -p build
    #    cd build
    #    cmake -G"Visual Studio 16 2019" -DBUILD_TESTING:BOOL=ON \
    #          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Build
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
